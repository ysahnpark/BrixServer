{
  "name": "z-schema",
  "description": "JSON schema validator",
  "homepage": "https://github.com/zaggino/z-schema",
  "keywords": [
    "json",
    "schema",
    "validator"
  ],
  "license": "MIT",
  "author": {
    "name": "Martin Zagora",
    "email": "zaggino@gmail.com",
    "url": "https://github.com/zaggino"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/zaggino/z-schema.git"
  },
  "main": "src/zSchema.js",
  "files": [
    "src/zSchema.js",
    "src/zSchema.min.js",
    "LICENSE",
    "README.md"
  ],
  "version": "1.5.1",
  "dependencies": {
    "q": ">= 0.9.6"
  },
  "devDependencies": {
    "mocha": ">= 1.12.0",
    "chai": ">= 1.7.2",
    "uglify-js": ">= 2.3.6"
  },
  "bugs": {
    "url": "https://github.com/zaggino/z-schema/issues",
    "email": "zaggino@gmail.com"
  },
  "scripts": {
    "compress": "uglifyjs ./src/zSchema.js --output ./src/zSchema.min.js --compress --mangle --comments",
    "test": "mocha ./test"
  },
  "readme": "z-schema validator\r\n==================\r\n[![NPM version](https://badge.fury.io/js/z-schema.png)](http://badge.fury.io/js/z-schema)\r\n\r\nJSON Schema validator for Node.js (draft4 version)\r\n\r\nCoded according to:\r\n\r\n[json-schema documentation](http://json-schema.org/documentation.html),\r\n[json-schema-core](http://json-schema.org/latest/json-schema-core.html),\r\n[json-schema-validation](http://json-schema.org/latest/json-schema-validation.html),\r\n[json-schema-hypermedia](http://json-schema.org/latest/json-schema-hypermedia.html)\r\n\r\nPassing all tests here (even optional, except zeroTerminatedFloats):\r\n\r\n[json-schema/JSON-Schema-Test-Suite](https://github.com/json-schema/JSON-Schema-Test-Suite)\r\n\r\nWill try to maintain this as much as possible, all bug reports welcome.\r\n\r\nBasic Usage\r\n-----------\r\n\r\n```javascript\r\nvar report = zSchema.validate(json, schema, function(report) {\r\n    if (report.valid === true) ...\r\n});\r\n```\r\n\r\nIf ```report.valid === false```, then errors can be found in ```report.errors```.\r\n\r\nThe report object will look something like:\r\n\r\n```json\r\n{\r\n    \"valid\": false,\r\n    \"errors\": [\r\n    \r\n    ]\r\n}\r\n```\r\n\r\nIf you need just to validate your schema, you can do it like this:\r\n\r\n```javascript\r\nvar validator = new zSchema();\r\nvar report = validator.validateSchema(schema);\r\nif (report.valid === true) ...\r\n```\r\n\r\nOr with Node.js style callback:\r\n\r\n```javascript\r\nvar validator = new zSchema();\r\nvalidator.validateSchema(schema, function (err, valid) {\r\n    if (err) ...\r\n});\r\n```\r\n\r\nRemote references in schemas\r\n----------------------------\r\n\r\nYour schemas can include remote references that should be real URIs ([more on that here](http://json-schema.org/latest/json-schema-core.html#anchor22)) \r\nso validator can make a request and download the schema needed. Validator automatically\r\ncaches these remote requests so they are not repeated with every validation.\r\n\r\nIn case you don't have a real server or you'd like to load files from different location,\r\nyou can preload remote locations into the validator like this:\r\n\r\n```javascript\r\nvar fileContent = fs.readFileSync(__dirname + '/../json_schema_test_suite/remotes/integer.json', 'utf8');\r\nzSchema.setRemoteReference('http://localhost:1234/integer.json', fileContent);\r\n```\r\n\r\n```http://localhost:1234/integer.json``` doesn't have to be online now, all schemas\r\nreferencing it will validate against ```string``` that was passed to the function.\r\n\r\nAdvanced (Server) Usage\r\n-----------------------\r\n\r\nYou can pre-compile schemas (for example on your server startup) so your application is not\r\nbothered by schema compilation and validation when validating ingoing / outgoing objects.\r\n\r\n```javascript\r\nvar validator = new zSchema();\r\nvalidator.compileSchema(schema, function (err, compiledSchema) {\r\n    assert.isUndefined(err);\r\n    ...\r\n});\r\n```\r\n\r\nThen you can re-use compiled schemas easily with sync-async validation API.\r\n\r\n```javascript\r\nvar report = validator.validateWithCompiled(json, compiledSchema);\r\nassert.isTrue(report.valid);\r\n...\r\n```\r\n\r\n```javascript\r\nvalidator.validateWithCompiled(json, compiledSchema, function(err, success, report) {\r\n    assert.isTrue(success);\r\n    ...\r\n});\r\n```\r\n\r\nNote:\r\n\r\nMost basic schemas don't have to be compiled for validation to work (although recommended).\r\nAsync compilation was mostly created to work with schemas that contain references to other files.\r\n\r\nCustomization\r\n-------------\r\n\r\nYou can add validation for your own custom string formats like this:\r\n(these are added to all validator instances, because it would never make sense to have multiple \r\nfunctions to validate format with the same name)\r\n\r\n```javascript\r\nzSchema.registerFormat('xstring', function (str) {\r\n    return str === 'xxx';\r\n});\r\nzSchema.validate('xxx', {\r\n    'type': 'string',\r\n    'format': 'xstring'\r\n}, function (report) {\r\n    // report.valid will be true\r\n}\r\n```\r\n\r\nStrict validation\r\n-----------------\r\n\r\nWhen creating new instance of validator, you can specify some options that will alter the validator behaviour like this:\r\n\r\n```javascript\r\nvar validator = new zSchema({\r\n    option: true\r\n});\r\n```\r\n\r\n* noExtraKeywords: ```true/false```\r\n\r\nwhen true, do not allow unknown keywords in schema\r\n\r\n* noZeroLengthStrings: ```true/false```\r\n\r\nwhen true, always adds minLength: 1 to schemas where type is string\r\n\r\n* noTypeless: ```true/false```\r\n\r\nwhen true, every schema must specify a type\r\n\r\n* forceAdditional: ```true/false```\r\n\r\nwhen true, forces not to leave out some keys on schemas (additionalProperties, additionalItems)\r\n\r\n* forceProperties: ```true/false```\r\n\r\nwhen true, forces not to leave out properties or patternProperties on type-object schemas\r\n\r\n* forceItems: ```true/false```\r\n\r\nwhen true, forces not to leave out items on array-type schemas\r\n\r\n* forceMaxLength: ```true/false```\r\n\r\nwhen true, forces not to leave out maxLength on string-type schemas, when format or enum is not specified\r\n\r\n__Alternatively__, you can turn on all of the above options with:\r\n\r\n```javascript\r\nvar validator = new zSchema({\r\n    strict: true\r\n});\r\n```",
  "readmeFilename": "README.md",
  "_id": "z-schema@1.5.1",
  "dist": {
    "shasum": "a44cc3899397c22c05a8e6c6dc7929aa12a73bd4"
  },
  "_from": "z-schema@",
  "_resolved": "https://registry.npmjs.org/z-schema/-/z-schema-1.5.1.tgz"
}
